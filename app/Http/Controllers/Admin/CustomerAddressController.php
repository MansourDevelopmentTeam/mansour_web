<?phpnamespace App\Http\Controllers\Admin;use App\Models\ACL\Role;use App\Models\Users\User;use Illuminate\Http\Request;use Tymon\JWTAuth\Facades\JWTAuth;use App\Http\Controllers\Controller;use Maatwebsite\Excel\Facades\Excel;use Illuminate\Support\Facades\Validator;use App\Models\Repositories\CustomerRepository;use App\Models\Transformers\CustomerFullTransformer;use App\Models\Transformers\CustomerSimpleTransformer;class CustomerAddressController extends Controller{    private $customerRepo;    private $customerTrans;    private $fullTrans;    public function __construct(CustomerRepository $customerRepo, CustomerSimpleTransformer $customerTrans, CustomerFullTransformer $fullTrans)    {        $this->customerRepo = $customerRepo;        $this->customerTrans = $customerTrans;        $this->fullTrans = $fullTrans;    }    public function index($user_id)    {        $customer = $this->customerRepo->getCustomerById($user_id);        $address = $customer->addresses->load("area", "city");        return $this->jsonResponse("Success", $address);    }    public function show($user_id, $address_id)    {        $customer = $this->customerRepo->getCustomerById($user_id);        $address = $customer->addresses()->where('id', $address_id)->firstOrFail()->load("area", "city");        return $this->jsonResponse("Success", $address);    }    public function store(Request $request, $user_id)    {        $customer = $this->customerRepo->getCustomerById($user_id);        $this->validate($request, [            "name" => "required",            "address" => "required",            "apartment" => "required",            "floor" => "required",            "landmark" => "sometimes|nullable",            "city_id" => "sometimes|nullable|exists:cities,id",            "area_id" => "sometimes|nullable|exists:areas,id",            "district_id" => "sometimes|nullable|exists:districts,id",            "primary" => "sometimes|nullable|boolean",            "lat" => "required",            "lng" => "required"        ]);        if (!$request->area_id) {            $request->merge(["area_id" => null]);        }        if (!$request->district_id) {            $request->merge(["district_id" => null]);        }        $address = $customer->addresses()->create($request->only(["name", "address", "apartment", "floor", "landmark", "lat", "lng", "city_id", "area_id", "district_id", "primary"]));        if ($request->primary === true) {            $customer->addresses()->where('id', '!=', $address->id)->update(["primary" => 0]);            $address->primary = 1;            $address->save();        }        return $this->jsonResponse("Success", $address);    }    public function update(Request $request, $user_id,$address_id)    {        $customer = $this->customerRepo->getCustomerById($user_id);        $address = $customer->addresses()->where('id',$address_id)->firstOrFail()->load("area", "city");        $this->validate($request, [            "name" => "required",            "address" => "required",            "apartment" => "required",            "floor" => "required",            "landmark" => "sometimes|nullable",            "city_id" => "sometimes|nullable|exists:cities,id",            "area_id" => "sometimes|nullable|exists:areas,id",            "district_id" => "sometimes|nullable|exists:districts,id",            "primary" => "sometimes|nullable|boolean",            "lat" => "required",            "lng" => "required"        ]);        $new_address = $address->replicate();        $new_address->created_at = $address->created_at;        $new_address->save();        if (!$request->area_id) {            $request->merge(["area_id" => null]);        }        if (!$request->district_id) {            $request->merge(["district_id" => null]);        }        $new_address->update($request->only(["name", "address", "apartment", "floor", "landmark", "lat", "lng", "city_id", "area_id", "district_id","primary"]));        if ($request->primary === true) {            $customer->addresses()->where('id', '!=', $new_address->id)->update(["primary" => 0]);            $new_address->primary = 1;            $new_address->save();        }        $address->delete();        $customer->refresh();        return $this->jsonResponse("Success", $new_address);    }}